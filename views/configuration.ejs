<html>
  <head>
    <title>A Trello Dashboard</title>
		<script src="https://cdn.shopify.com/s/assets/external/app.js"></script>
    <link rel="stylesheet" href="../stylesheets/uptown.css" />
    <link rel="stylesheet" href="../stylesheets/style.css" />

		<script type="text/javascript">
		ShopifyApp.init({
			apiKey: '<%= api_key %>',
			shopOrigin: 'https://<%= shop %>'
		});
		</script>
	</head>
  <body>
    <!-- Jquery -->
    <script src="https://code.jquery.com/jquery-1.7.1.min.js"></script>

    <!-- SHOPIFY HEADER -->
    <script>
      $("#savedMsg").toggle(false);  // Displayys Trello message

      var saveMessage = function(text) {
        $("savedMsg").removeClass();
        $("#savedMsgLink").text(text);
        if (text.includes("Error")) {
          $("#savedMsg").addClass("full-width alert error");
        } else {
          $("#savedMsg").addClass("full-width alert success");
        }
        $("#savedMsg").toggle(true);

      };

      ShopifyApp.ready(function() {
        ShopifyApp.Bar.initialize({
          title: '<%= title %>',
          icon: '/images/logo.png',
          buttons: {
            primary: {
              label: "Save",
              callback: function() {
                // Make sure save message is hidden to start
                $("#savedMsg").toggle(false);

                // Dictionary that gets sent to server to store user data
                var rulesData = {
                  "shop"  : "<%= shop %>",
                  "trello_token" : "",
                  "recieved" : "",
                  "fulfilled" : "",
                  "shopify_rules" : [],
                  "trello_rules" : []
                };

                // Recieved orders go to this list
                var recieved = $("#recievedOrders").find(":selected");
                if(recieved.val() === "-") {
                  rulesData["recieved"] = null;
                  console.log('Recieved is null')
                } else {
                  rulesData["recieved"] = recieved.attr('id');
                };

                // Fulfilled orders go to this list
                var fulfilled = $("#fulfilledOrders").find(":selected");
                if(fulfilled.val() === "-") {
                  rulesData["fulfilled"] = null;
                  console.log('Fulfilled is null')
                } else {
                  rulesData["fulfilled"] = fulfilled.attr('id');
                };

                // Shopify Rules
                var shopifyRules = $("#extraShopifyRules").children();
                $.each(shopifyRules, function() {
                  var newRule = {};
                  // newRule.id = (this.id);  //id
                  newRule.country = ($(this).find(".optionSelect").val()); // country/tag
                  newRule.input = ($(this).find("input").val()); //input
                  // add check input here first.
                  newRule.list = ($(this).find(".listOption").find(":selected").attr('id'));

                  rulesData["shopify_rules"].push(newRule);
                });

                // Trello Rules
                var trelloRules = $("#extraTrelloRules").children();
                $.each(trelloRules, function() {
                  var newRule = {};
                  // newRule.id = (this.id);
                  newRule.list = $(this).find(".listOption").find(":selected").attr('id');
                  newRule.input = $(this).find("input").val();
                });
                $.ajax({
                  type: "POST",
                  url : "/configuration",
                  dataType : 'json',
                  data: rulesData,
                  statusCode: {
                    200 : function() {
                      saveMessage("Success. Your settings were saved.");
                    },
                    500 : function () {
                      console.log("Error. Your settings were not saved properly. Error code 500.");
                      saveMessage("Error. Your settings were not saved properly");
                    }
                  }
                });
              }
            },
            secondary: [
              // Dropdown example
              {
                label: "More",
                type: "dropdown",
                links: [
                  // Link Button that opens in the app
                  { label: "Rate Us", href: "/update", target: "app" },
                  // Button with a callback function
                  { label: "Feature Request", callback: function() { alert("destroy") } }
                ]
              },
              {
                // Link Button that opens in a new window
                label: "Help", href: 'http://<%= shop %>.myshopify.com',
                target: "new"
              },
              {
                // Link Button that opens in a new window
                label: "Contact", href: 'mailto:joshua.bitossi@gmail.com',
                target: "new"
              }
            ]
          }
        });

        ShopifyApp.Bar.loadingOff();

      });
      </script>
                          <!-- END SHOPIFY HEADER -->
      <script src="https://api.trello.com/1/client.js?key=dbdd3808d314c362931b7c8918766c03"></script>    <!-- Trello API -->



  <main>
    <section id="loggedout" class="full-width alert warning">
      <a id="connectLink" href="#" class="full-width" style="text-align:center;">Click here to authorize Trello</a>
    </section>
    <div id="loggedin" style="margin-right:10px;">
        <span id="header" class="columns twelve" style="text-align:right;">
            <span id="fullName"></span></br>
            <a id="disconnect" href="#">Log Out</a>
        </span>

        <div id="output"></div>
    </div>
    <section id="savedMsg" class="">
      <p id="savedMsgLink" class="full-width" style="text-align:center;"></p>
    </section>
    <div id="rules">
      <!-- Main Rules -->
      <section class="columns twelve">
        <h3>Main Rules</h3>
      </section>
      <div class="columns eleven">
        <span class="columns three" style="text-align:left;">All recieved orders go to list: </span>
        <select id="recievedOrders" class="listOption columns six" style="margin-left:0px;">
          <option>-</option>
        </select>
      </div>
      <div class="columns eleven" style="margin-top: 5px;">
        <span class="columns three" style="text-align:left;">All fulfilled orders go to list: </span>
        <select id="fulfilledOrders" class="listOption columns six" style="margin-left:0px;">
          <option>-</option>
        </select>
      </div>


    <!-- Extra Rules -->
    <section class="columns twelve" style="padding-top:20px;">
      <h3>Shopify Rules</h3>
      <a onclick="addExtraShopifyRule()"><i class="icon-addition" style="height: 16px;margin-top: 6px;padding-left: 10px;"></i></a>
    </section>
      <div class="columns twelve">
        <ul style="list-style: none" id="extraShopifyRules">
        </ul>
      </div>
    <section class="columns twelve" style="padding-top:20px;">
      <h3>Trello Rules</h3>
      <a onclick="addExtraTrelloRule()"><i class="icon-addition" style="height: 16px;margin-top: 6px;padding-left: 10px;"></i></a>
    </section>
    <div class="columns twelve">
        <ul style="list-style: none" id="extraTrelloRules">
          <!-- Extra Rules -->
        </ul>
    </div>

    <br />
  </main>
  <script type="text/javascript">
    var listsList = ""; // {BoardName : {list object}}

    // HTML for new Shopify rule
    var shopifyRule = "<li class='extraRule'><section class='columns eleven' style=margin-top:5px;'> <span class='column one'>Orders with</span>\
        <select class='optionSelect columns two' style='margin-left:0px; margin-right:5px;'>\
          <option>Country</option>\
          <option>Tag</option>\
          <option>Product Barcode</option>\
          <option>Product SKU</option>\
          <option>Product Name</option>\
        </select>\
        <input type='text' placeholder='Enter your value' class='columns three' style='margin-right:5px;' />\
        <span style='margin-right:10px;'>go to list</span>\
        <select class='listOption columns two' style='margin-left:0px;'>\
          <option>-</option>\
        </select>\
        <a class='columns one' href='#'><i class='icon-close'></i></a>\
      </section></li>";
    // HTML for new Trello rule
    var trelloRule = "<li class='extraRule'><section class='columns eleven'style=margin-top:5px;'><span class='column one'>Orders in </span>\
        <select class='listOption columns two' ></select>\
        <span class='column one'>list have</span>\
        <input type='text' class='column two' />\
        <span class='column two'>tag assigned to them.</span>\
        <a href='#' class='column one'><i class='icon-close'></i></a>\
      </section></li>";

    var logout = function() {
        Trello.deauthorize();
        updateLoggedIn();
        window.location.reload(false);  //Reload the page
    };

    $("#disconnect").click(logout);  // Logout from Trello

    // Log in to Trello
    $("#connectLink").click(function() {
      try {
        Trello.authorize({
          type  : "popup",
          name  : "Shopify Orders",
          scope : {
            read    : 'allowRead',
            write   : 'allowWrite',
            account : 'allowAccount'
          },
          expiration: "never",
          persist : true,
          success : onAuthorize
        })
      } catch(e) {
        console.log(e);
      }
    });

    // Trello error message
    var error = function(errorMsg) {
      console.log(errorMsg);
    };

    var getConfiguration = function() {
      // Get customers rules from the database
      $.ajax({
        type: "POST",
        url: "/get_configuration",
        data : {"shop" : "<%= shop %>" },
        success : function (data) {
            setInitialSettings(data);   // Set form based on customer rules
          }
        });
      };

      var setInitialSettings = function(data) {
        console.log(data)
        // Sets the initial config settings based on users saved settings.
        if (data.length === 0 ) {
          return ;  // No rules currently set
        } else {
            // Set recieved rule if exists
            if (data.recieved !== "null") {
              console.log(data.recieved);
              $('#recievedOrders option[id=' + data.recieved + ']').attr('selected','selected');

            };

            // Set fulfilled rule if exists
            if (data.fulfilled !== "null") {
              $('#fulfilledOrders option[id=' + data.fulfilled + ']').attr('selected','selected');
            };

            // Add shopify rules if they exist
            if (data.shopify_rules.length !== 0) {
              data.shopify_rules.forEach(function(rule) {
                addExtraShopifyRule();  // Add extra rule to rules div
                $("#extraShopifyRules li:last-child .optionSelect").val(rule.country);  // Set country/tag/barcode etc dropdown
                $("#extraShopifyRules li:last-child input").val(rule.input);  // Set input value
                $("#extraShopifyRules li:last-child .listOption option[id=" + rule.list + "]").attr('selected', 'selected');
              })
            };

            // Add trello rules if they exist
            if (data.trello_rules.length !== 0) {
              data.trello_rules.forEach(function(rule) {
                addExtraTrelloRule();
                $("#extraTrelloRules li:last-child .listOption option[id=" + rule.list + "]").attr('selected', 'selected');
                $("#extraTrelloRules li:last-child input").val(rule.input);
              });
          }
        }
      };

    // Make sure Trello user is logged in. Get name, boards and lists.
    // Called when the page is loaded and when the user logs in.
    var onAuthorize = function() {
      // Send Trello token server to store in the session
      $.ajax({
        type: "POST",
        url: "/trello",
        data : {"trello_token" : localStorage.getItem(localStorage.key('trello_token'))}
      });

      checkTrelloWebhooks();
      updateLoggedIn(); // Update logged in message
      updateName();  // Get users name and update login details
      getBoards();
    };

    var checkTrelloWebhooks = function() {
      var success = function(successMsg) {
        console.log(successMsg);
      };

      var error = function(errorMsg) {
        console.log('Trello error');
        console.log(errorMsg);
      };

      Trello.get('/members/me/tokens?webhooks=true', success, error);
    };

    var checkShopifyWebhooks = function() {
      var logMessage = function(successMsg) {
        console.log(successMsg);
      };

      var error = function(errorMsg) {
        console.log('Trello error');
        console.log(errorMsg);
      };

      $.ajax({
          type: "POST",
          url : "https://" + <%= shop %> + "/admin/webhooks.json",
          sucess: function(res) {
            logmessage(res);
          },
          error: function(res) {
            logmessage(res);
          };
        });
    };

    var updateName = function() {
      // Get Trello user's name
      Trello.members.get("me", function(member){
        $("#fullName").text("Logged in to Trello as: " + member.fullName + ".");
      });
    };

    var getBoards = function() {
      // Get users boards. For each board get the lists within that board
      Trello.get('/member/me/boards', function(res) {
        var numberOfBoards = res.length;  // total number of boards
        var boardCount = 0;  // Count of boards that have had their lists
        // For each board get lists from board and increment count
        for (board in res) {
          getLists(res[board], function() {
            boardCount ++;
            // Once all the lists have loaded get user's configuration
            if (boardCount == numberOfBoards) {
              getConfiguration();
            }
          })
        }
      }, function(err) {
        console.log(err);
      });
    };

    var getLists = function(board, callback) {
      var boardID = board['id'];
      var boardName = board['name'];
      Trello.get('/boards/'+boardID+'/lists', function(res) {
        // Append each list to the Option value of select element
        appendListToOption(res, boardID, boardName, function() {
          callback();
        });
      }, function(err) {
          console.log(err);
        });
      };

    var appendListToOption = function(res, boardID, boardName, callback) {
      var listString = "";
      listString += "<optgroup label='"+boardName+"'>"
      for (var item in res) {
        var name = res[item]["name"];
        var id = res[item]["id"];
        listString += "<option value="+id+" id=" + id + ">" + name + "</option>"
      };
      listString += "</optgroup>";
      $('.listOption').append($(listString));
      listsList += listString;
      callback();
    };


     var addExtraShopifyRule = function() {
      $("#extraShopifyRules").append($(shopifyRule));
      var lastRule = $("#extraShopifyRules li:last-child .listOption")
      $(lastRule).append($(listsList)); // Set to list of Trello Boards
      $("#extraShopifyRules a").click(function() {
        $(this).parent().remove();
      });
    };

    var addExtraTrelloRule = function() {
      $("#extraTrelloRules").append($(trelloRule));
      var lastRule = $("#extraTrelloRules li:last-child .listOption")
      $(lastRule).append($(listsList));

      // rule_count ++ ;
      // $("#extraTrelloRules li:last-child").attr("id", rule_count);
      $("#extraTrelloRules a").click(function() {
        $(this).parent().remove();
      });
    };

    var updateLoggedIn = function() {
        var isLoggedIn = Trello.authorized();
        $("#loggedout").toggle(!isLoggedIn);
        $("#loggedin").toggle(isLoggedIn);
    };

    // See if app has already been authorized
    try {
      Trello.authorize({
        type  : "popup",
        name  : "Shopify Orders",
        scope : {
          read    : 'allowRead',
          write   : 'allowWrite',
          account : 'allowAccount'
        },
        expiration: "never",
        persist : true,
        success : onAuthorize
      })
    } catch(e) {
      console.log(e);
    };


    updateLoggedIn(); // Check if user is logged in or not


  </script>

    <footer>
    </footer>
  </main>
  </body>
</html>
